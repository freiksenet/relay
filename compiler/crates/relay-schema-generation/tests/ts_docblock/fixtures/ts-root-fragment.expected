==================================== INPUT ====================================
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

//- module.ts

import type Cat from 'Cat.ts';
import type {CatIsHungryFragment$key} from 'CatIsHungryFragment.graphql';

import {graphql} from 'relay-runtime';
import {readFragment} from 'relay-runtime/store/ResolverFragments';

/**
 * @RelayResolver
 */
export function Cat(id: DataID): Cat {
  return {}
}

/**
 * @RelayResolver
 */
export function full_name(key: CatIsHungryFragment$key): string | null | undefined {
  const cat = readFragment(graphql`
    fragment CatIsHungryFragment on Cat {
      first_name
      last_name
    }
  `, key);

  return `${first_name} ${last_name}`;
}
==================================== OUTPUT ===================================
Field(
    TerseRelayResolver(
        TerseRelayResolverIr {
            field: FieldDefinition {
                name: Identifier {
                    span: 529:538,
                    token: Token {
                        span: 529:538,
                        kind: Identifier,
                    },
                    value: "full_name",
                },
                type_: Named(
                    NamedTypeAnnotation {
                        name: Identifier {
                            span: 570:576,
                            token: Token {
                                span: 570:576,
                                kind: Identifier,
                            },
                            value: "String",
                        },
                    },
                ),
                arguments: None,
                directives: [],
                description: None,
                hack_source: None,
                span: 529:538,
            },
            type_: WithLocation {
                location: module.ts:34:40,
                item: "Cat",
            },
            root_fragment: Some(
                WithLocation {
                    location: module.ts:14:33,
                    item: FragmentDefinitionName(
                        "CatIsHungryFragment",
                    ),
                },
            ),
            deprecated: None,
            semantic_non_null: None,
            live: None,
            location: module.ts:529:538,
            fragment_arguments: Some(
                [],
            ),
            source_hash: ResolverSourceHash(
                "5d3cfc5b1e01e017176b904f80037149",
            ),
        },
    ),
)
extend type Cat {
  full_name: String @relay_resolver(fragment_name: "CatIsHungryFragment", has_output_type: true, import_name: "full_name", import_path: "module.ts") @resolver_source_hash(value: "5d3cfc5b1e01e017176b904f80037149")
}


Type(
    StrongObjectResolver(
        StrongObjectIr {
            type_name: Identifier {
                span: 449:452,
                token: Token {
                    span: 449:452,
                    kind: Identifier,
                },
                value: "Cat",
            },
            rhs_location: module.ts:449:452,
            root_fragment: WithLocation {
                location: module.ts:449:452,
                item: FragmentDefinitionName(
                    "Cat__id",
                ),
            },
            description: None,
            deprecated: None,
            live: None,
            semantic_non_null: None,
            location: module.ts:449:452,
            implements_interfaces: [],
            source_hash: ResolverSourceHash(
                "5d3cfc5b1e01e017176b904f80037149",
            ),
        },
    ),
)
type Cat @__RelayResolverModel {
  id: ID!
  __relay_model_instance: RelayResolverValue! @relay_resolver(generated_fragment: true, fragment_name: "Cat__id", import_name: "Cat", import_path: "module.ts", inject_fragment_data: "id") @resolver_source_hash(value: "5d3cfc5b1e01e017176b904f80037149") @unselectable(reason: "This field is intended only for Relay's internal use")
}
